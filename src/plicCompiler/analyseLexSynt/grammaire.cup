package plicCompiler.analyseLexSynt ;

import plicCompiler.arbreAbstrait.ArbreAbstrait;
import plicCompiler.arbreAbstrait.expression.Expression;
import plicCompiler.arbreAbstrait.expression.constante.ConstanteArithmetique;
import plicCompiler.arbreAbstrait.expression.constante.ConstanteLogique;
import plicCompiler.arbreAbstrait.expression.operation.operationUnaire.ExpressionNegative;
import plicCompiler.arbreAbstrait.expression.operation.operationUnaire.Not;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.arithmetique.Add;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.arithmetique.Mul;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.arithmetique.Sub;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.arithmetique.Div;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.comparaison.Equal;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.comparaison.GreaterThan;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.comparaison.LowerThan;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.comparaison.Different;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.logique.And;
import plicCompiler.arbreAbstrait.expression.operation.operationBinaire.logique.Or;



action code {: /* vide pour le moment */
	    :} ;
   
/* Parser code to change the way the parser reports errors (include
   line and column number of the error). */
parser code {:
    /* Change the method report_error so it will display the line and column of where the error
       occurred in the input as well as the reason for the error which is passed into the method
       in the String 'message'. */
    public void report_error(String message, Object info) {
   
        /* Create a StringBuffer called 'm' with the string 'Error' in it. */
        StringBuffer m = new StringBuffer("Error");
   
        /* Check if the information passed to the method is the same type as the type 
           java_cup.runtime.Symbol. */
        if (info instanceof java_cup.runtime.Symbol) {
            /* Declare a java_cup.runtime.Symbol object 's' with the information in the object 
               info that is being typecasted as a java_cup.runtime.Symbol object. */
            java_cup.runtime.Symbol s = ((java_cup.runtime.Symbol) info);
   
            /* Check if the line number in the input is greater or equal to zero. */
            if (s.left >= 0) {                
                /* Add to the end of the StringBuffer error message the line number of the error 
                   in the input. */
                m.append(" in line "+(s.left+1));   
                /* Check if the column number in the input is greater or equal to zero. */
                if (s.right >= 0)                    
                    /* Add to the end of the StringBuffer error message the column number of the 
                       error in the input. */
                    m.append(", column "+(s.right+1));
            }
        }
        /* Add to the end of the StringBuffer error message created in this method the message that
           was passed into this method. */
        m.append(" : "+message);
   
        /* Print the contents of the StringBuffer 'm', which contains an error message, out on 
           a line. */
        System.err.println(m);
    }
    /* Change the method report_fatal_error so when it reports a fatal error it will display the 
       line and column number of where the fatal error occurred in the input as well as the reason
       for the fatal error which is passed into the method in the object 'message' and then exit.*/
    public void report_fatal_error(String message, Object info) {
        report_error(message, info);
        //System.exit(1);
    }
:};
/* ------------Declaration of Terminals and Non Terminals Section----------- */
/* Terminals (tokens returned by the scanner).  
   Terminals that have no value are listed first and then terminals that do have a value, in this 
   case a String value, are listed on the next line down. */

terminal Symbol		POINTVIRGULE;

terminal Symbol		PAROUV;
terminal Symbol		PARFER;

terminal Symbol		DIFF;
terminal Symbol		SUP;
terminal Symbol		INF;
terminal Symbol		EQUAL;

terminal Symbol		PLUS;
terminal Symbol		MINUS;
terminal Symbol		MUL;
terminal Symbol		DIV;

terminal String 	CSTE;
terminal Symbol 	VRAI;
terminal Symbol		FAUX;
   
/* Non terminals used in the grammar section.  
   Non terminals that have an object value are listed first and then non terminals that have an 
   integer value are listed.  An object value means that it can be any type, it isn't set to a 
   specific type.  So it could be an Integer or a String or whatever. */

non terminal ArbreAbstrait PROG;
non terminal Expression EXPR, EXPRARI, EXPRCOMP;

precedence left PLUS, MINUS, DIFF, SUP, INF;
precedence left MUL, DIV;
precedence left EQUAL;

/* ----------------------------Grammar Section-------------------- */

start with PROG;

PROG ::= EXPR:e POINTVIRGULE
				{:
					RESULT = e;
				:}
         ;
        
EXPR	::=		CSTE:c 
			    {:
					RESULT = new ConstanteArithmetique(c);
		        :}
		|		VRAI
			    {:
					RESULT = new ConstanteLogique("1");
		        :}
		|		FAUX
			    {:
					RESULT = new ConstanteLogique("0");
		        :}
		|		EXPR:e1 PLUS EXPR:e2
		        {:
					RESULT = new Add(e1,e2);
		        :}
		|		EXPR:e1 MINUS EXPR:e2
		        {:
					RESULT = new Sub(e1,e2);
		        :}
		|		EXPR:e1 MUL EXPR:e2
		        {:
					RESULT = new Mul(e1,e2);
		        :}
		|		EXPR:e1 DIV EXPR:e2
		        {:
					RESULT = new Div(e1,e2);
		        :}
		|		EXPR:e1 DIFF EXPR:e2
		        {:
					RESULT = new Different(e1,e2);
		        :}
		|		EXPR:e1 SUP EXPR:e2
		        {:
					RESULT = new GreaterThan(e1,e2);
		        :}
		|		EXPR:e1 INF EXPR:e2
		        {:
					RESULT = new LowerThan(e1,e2);
		        :}
		|		EXPR:e1 EQUAL EXPR:e2
		        {:
					RESULT = new Equal(e1,e2);
		        :}
		|		PAROUV EXPR:e PARFER
		        {:
		         	RESULT = e;
		        :}
		|		MINUS EXPR:e
				{:
					RESULT = new ExpressionNegative(e);
				:}
         ;